# -*- coding: utf-8 -*-
"""
Created on Sun Oct 11 14:48:51 2020

@author: fengyui
"""
import sys
from pyhanlp import *
import jieba

#pyhanlp加载词典
def load_dictionary():
    #pyhanlp添加自定义词典 强制优先自定义词典分词  #强制优先使用自定义词典分词
#    CustomDictionary = JClass("com.hankcs.hanlp.dictionary.CustomDictionary")
#    StandardTokenizer = JClass("com.hankcs.hanlp.seg.Segment").enableCustomDictionaryForcing
#    CustomDictionary.insert("普达措")  # 动态增加
#    CustomDictionary.insert("碧塔海")  # 强行插入
#    #CustomDictionary.remove("蜀都湖"); # 删除词语（注释掉试试）
#    CustomDictionary.add("蜀都湖")
    IOUtil = JClass('com.hankcs.hanlp.corpus.io.IOUtil')
    path = HanLP.Config.CoreDictionaryPath
    dic = IOUtil.loadDictionary([path])
    return set(dic.keySet())
#dic1=dic.read()
#lendict=len(dic1) #字典总长度

#加载jieba的词典
def load_dic():
    dic = {}
    dic_file = jieba.get_dict_file()
#    jieba.load_userdict(r"C:\Users\dell\Desktop\nlp_code\userdict.txt")
    for line in dic_file:
        word, count, type = line.decode("utf-8").split()
        dic[word] = count
    dic_file.close()
    return dic

#加载自定义词典


#dic1=dic.read()
#lendict=len(dic1) #字典总长度

def forward_segment(text, dic):
    word_list = []
    i = 0
    while i < len(text):
        longest_word = text[i]                      # 当前扫描位置的单字
        for j in range(i + 1, len(text) + 1):       # 所有可能的结尾
            word = text[i:j]                        # 从当前位置到结尾的连续字符串
            if word in dic:                         # 在词典中
                if len(word) > len(longest_word):   # 并且更长
                    longest_word = word             # 则更优先输出
        word_list.append(longest_word)              # 输出最长词
        i += len(longest_word)                      # 正向扫描
    return word_list

dic = load_dictionary()
tes = "普达措国家公园占地面积很大，我9月底去的，碧塔海景区在维护去不了，很遗憾，因为碧塔海是非常美的，两条徒步路线我们选择了环蜀都湖的，风景实在是很美，像是走在画儿里，沿蜀都湖的木栈道徒步，沿路有很多小松鼠，一点儿不怕人，在路边的草地上、树上追逐打闹，我个人比较习惯生态环境好的景区，景区没有什么商业气息，等碧塔海再次开放后，我还会再去的！"
print(forward_segment(tes, dic))



#backward segment
def backward_segment(text, dic):
    word_list = []
    i = len(text) - 1
    while i >= 0:                                   # 扫描位置作为终点
        longest_word = text[i]                      # 扫描位置的单字
        for j in range(0, i):                       # 遍历[0, i]区间作为待查询词语的起点
            word = text[j: i + 1]                   # 取出[j, i]区间作为待查询单词
            if word in dic:
                if len(word) > len(longest_word):   # 越长优先级越高
                    longest_word = word
                    break
        word_list.insert(0, longest_word)           # 逆向扫描，所以越先查出的单词在位置上越靠后
        i -= len(longest_word)
    return word_list


dic = load_dictionary()
tes = "普达措国家公园占地面积很大，我9月底去的，碧塔海景区在维护去不了，很遗憾，因为碧塔海是非常美的，两条徒步路线我们选择了环蜀都湖的，风景实在是很美，像是走在画儿里，沿蜀都湖的木栈道徒步，沿路有很多小松鼠，一点儿不怕人，在路边的草地上、树上追逐打闹，我个人比较习惯生态环境好的景区，景区没有什么商业气息，等碧塔海再次开放后，我还会再去的！"
print(backward_segment(tes, dic))


def count_single_char(word_list: list):  # 统计单字成词的个数
    return sum(1 for word in word_list if len(word) == 1)


def bidirectional_segment(text, dic):
    f = forward_segment(text, dic)
    b = backward_segment(text, dic)
    if len(f) < len(b):                                  # 词数更少优先级更高
        return f
    elif len(f) > len(b):
        return b
    else:
        if count_single_char(f) < count_single_char(b):  # 单字更少优先级更高
            return f
        else:
            return b                                     # 都相等时逆向匹配优先级更高

dic = load_dictionary()
tes = "普达措国家公园占地面积很大，我9月底去的，碧塔海景区在维护去不了，很遗憾，因为碧塔海是非常美的，两条徒步路线我们选择了环蜀都湖的，风景实在是很美，像是走在画儿里，沿蜀都湖的木栈道徒步，沿路有很多小松鼠，一点儿不怕人，在路边的草地上、树上追逐打闹，我个人比较习惯生态环境好的景区，景区没有什么商业气息，等碧塔海再次开放后，我还会再去的！"
print(bidirectional_segment(tes, dic))


if __name__ == '__main__':
    dic = load_dic()
    dic = load_dictionary()
    
    path = r"C:\Users\dell\Desktop\nlp_code\review.txt"
    new_path = r"C:\Users\dell\Desktop\nlp_code\seg_review.txt"
    f=open(path,encoding='utf-8')
    f_new = open(new_path, 'w',encoding='utf-8')
    text=f.readlines()
    for line in text:
        line = HanLP.convertToSimplifiedChinese(line)   #繁体转中文
        l_seg = bidirectional_segment(line, dic)        #双向匹配
        for i in l_seg:
            f_new.write(i)
            f_new.write('/')
    f_new.close()
    f.close()
    


 



